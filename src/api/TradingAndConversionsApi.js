/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptedQuoteDto from '../model/AcceptedQuoteDto';
import QuoteDto from '../model/QuoteDto';
import QuoteRequestDto from '../model/QuoteRequestDto';

/**
* TradingAndConversions service.
* @module api/TradingAndConversionsApi
* @version 1.0.1
*/
export default class TradingAndConversionsApi {

    /**
    * Constructs a new TradingAndConversionsApi. 
    * @alias module:api/TradingAndConversionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the quoteAccept operation.
     * @callback module:api/TradingAndConversionsApi~quoteAcceptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptedQuoteDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept Quote
     * Executes a quote.
     * @param {String} uuid The quote UUID you are accepting.
     * @param {module:api/TradingAndConversionsApi~quoteAcceptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptedQuoteDto}
     */
    quoteAccept(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling quoteAccept");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Hawk'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AcceptedQuoteDto;
      return this.apiClient.callApi(
        '/api/v1/quote/accept/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteCreate operation.
     * @callback module:api/TradingAndConversionsApi~quoteCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Quote
     * Creates a quote to convert between wallets.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [estimate = false)] Create estimate quote
     * @param {module:model/QuoteRequestDto} [quoteRequestDto] 
     * @param {module:api/TradingAndConversionsApi~quoteCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDto}
     */
    quoteCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['quoteRequestDto'];

      let pathParams = {
      };
      let queryParams = {
        'estimate': opts['estimate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Hawk'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuoteDto;
      return this.apiClient.callApi(
        '/api/v1/quote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteList operation.
     * @callback module:api/TradingAndConversionsApi~quoteListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuoteDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Quotes
     * Retrieves all quotes on a specific Merchant ID.
     * @param {String} merchantId Merchant ID you are retrieving quotes from.
     * @param {module:api/TradingAndConversionsApi~quoteListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuoteDto>}
     */
    quoteList(merchantId, callback) {
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling quoteList");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Hawk'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [QuoteDto];
      return this.apiClient.callApi(
        '/api/v1/quote/{merchantId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteRead operation.
     * @callback module:api/TradingAndConversionsApi~quoteReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Quote
     * Retrieves a specific quote.
     * @param {String} uuid UUID of the quote you are retrieving.
     * @param {module:api/TradingAndConversionsApi~quoteReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDto}
     */
    quoteRead(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling quoteRead");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Hawk'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuoteDto;
      return this.apiClient.callApi(
        '/api/v1/quote/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
