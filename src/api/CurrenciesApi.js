/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CurrencyDto from '../model/CurrencyDto';
import CurrencyFiatDto from '../model/CurrencyFiatDto';

/**
* Currencies service.
* @module api/CurrenciesApi
* @version 1.0.1
*/
export default class CurrenciesApi {

    /**
    * Constructs a new CurrenciesApi. 
    * @alias module:api/CurrenciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listCurrenciesCrypto operation.
     * @callback module:api/CurrenciesApi~listCurrenciesCryptoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurrencyDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Crypto Currencies
     * Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Where to start fetching records.
     * @param {Number} [max = 200)] Maximum number of items in response.
     * @param {Boolean} [allowDeposits = false)] Only list currencies that allow deposits.
     * @param {module:api/CurrenciesApi~listCurrenciesCryptoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurrencyDto>}
     */
    listCurrenciesCrypto(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'max': opts['max'],
        'allowDeposits': opts['allowDeposits']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CurrencyDto];
      return this.apiClient.callApi(
        '/api/currency/crypto', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCurrenciesDeposit operation.
     * @callback module:api/CurrenciesApi~listCurrenciesDepositCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurrencyDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Wallet Currencies
     * These are the currencies that can be used to create a new wallet.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Where to start fetching records.
     * @param {Number} [max = 200)] Maximum number of items in response.
     * @param {module:api/CurrenciesApi~listCurrenciesDepositCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurrencyDto>}
     */
    listCurrenciesDeposit(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CurrencyDto];
      return this.apiClient.callApi(
        '/api/currency/deposit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCurrenciesFiat operation.
     * @callback module:api/CurrenciesApi~listCurrenciesFiatCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurrencyFiatDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Fiat Currencies
     * Retrieves a list of all display fiat currencies available on BVNK's Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Where to start fetching records.
     * @param {Number} [max = 200)] Maximum number of items in response.
     * @param {module:api/CurrenciesApi~listCurrenciesFiatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurrencyFiatDto>}
     */
    listCurrenciesFiat(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CurrencyFiatDto];
      return this.apiClient.callApi(
        '/api/currency/fiat', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
