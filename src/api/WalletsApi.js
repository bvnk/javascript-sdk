/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BalanceDto from '../model/BalanceDto';
import ServerErrorDto from '../model/ServerErrorDto';
import TransactionReportDto from '../model/TransactionReportDto';
import WalletDto from '../model/WalletDto';
import WalletRequestDto from '../model/WalletRequestDto';

/**
* Wallets service.
* @module api/WalletsApi
* @version 1.0.1
*/
export default class WalletsApi {

    /**
    * Constructs a new WalletsApi. 
    * @alias module:api/WalletsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the walletBalanceList operation.
     * @callback module:api/WalletsApi~walletBalanceListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BalanceDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Wallet Balances
     * Retrieves the balances of your wallets on platform.
     * @param {Object} opts Optional parameters
     * @param {String} [date] Date at to retrieve balances.
     * @param {module:api/WalletsApi~walletBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BalanceDto>}
     */
    walletBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Hawk'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BalanceDto];
      return this.apiClient.callApi(
        '/api/wallet/balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletCreate operation.
     * @callback module:api/WalletsApi~walletCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Wallet
     * Creates a wallet on the BVNK platform.
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletRequestDto} [walletRequestDto] 
     * @param {module:api/WalletsApi~walletCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletDto}
     */
    walletCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['walletRequestDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Hawk'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletDto;
      return this.apiClient.callApi(
        '/api/wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletList operation.
     * @callback module:api/WalletsApi~walletListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WalletDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Wallets
     * Retrieves a list of wallets on your account.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Where to start fetching records.
     * @param {Number} [max = 10)] Maximum number of items in response.
     * @param {module:api/WalletsApi~walletListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WalletDto>}
     */
    walletList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Hawk'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WalletDto];
      return this.apiClient.callApi(
        '/api/wallet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletRead operation.
     * @callback module:api/WalletsApi~walletReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Wallet
     * Retrieves a specific wallet.
     * @param {Number} id The ID of the wallet that you want to retrieve.
     * @param {module:api/WalletsApi~walletReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletDto}
     */
    walletRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling walletRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Hawk'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WalletDto;
      return this.apiClient.callApi(
        '/api/wallet/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletTransactionReport operation.
     * @callback module:api/WalletsApi~walletTransactionReportCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionReportDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transactions Report
     * Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format.
     * @param {Object} opts Optional parameters
     * @param {Number} [walletId = 255861)] Date at to retrieve balances.
     * @param {String} [fromDate = '2022-09-17')] Export range from date in format 'YYYY-MM-dd'.
     * @param {String} [toDate = '2023-03-17')] Export range to date in format 'YYYY-MM-dd'.
     * @param {String} [format = 'csv')] 'json' - json format, 'csv' - csv format
     * @param {String} [transactionType] Transaction type code
     * @param {module:api/WalletsApi~walletTransactionReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionReportDto>}
     */
    walletTransactionReport(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'walletId': opts['walletId'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'format': opts['format'],
        'transactionType': opts['transactionType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Hawk'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TransactionReportDto];
      return this.apiClient.callApi(
        '/api/transaction/report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
