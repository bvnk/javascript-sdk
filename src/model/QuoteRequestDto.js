/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QuoteRequestDto model module.
 * @module model/QuoteRequestDto
 * @version 1.0.1
 */
class QuoteRequestDto {
    /**
     * Constructs a new <code>QuoteRequestDto</code>.
     * @alias module:model/QuoteRequestDto
     * @param from {String} The currency to convert from.
     * @param to {String} The currency to convert to.
     * @param fromWallet {Number} The ID of the wallet converted from.
     * @param useMinimum {Boolean} Is converting the minimum allowed amount.
     * @param useMaximum {Boolean} Is converting the max amount of the wallet.
     * @param toWallet {Number} The ID of the wallet converted to.
     * @param amountIn {Number} The amount being converted.
     * @param payInMethod {String} The type of method in.
     * @param payOutMethod {String} The type of method out.
     */
    constructor(from, to, fromWallet, useMinimum, useMaximum, toWallet, amountIn, payInMethod, payOutMethod) { 
        
        QuoteRequestDto.initialize(this, from, to, fromWallet, useMinimum, useMaximum, toWallet, amountIn, payInMethod, payOutMethod);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from, to, fromWallet, useMinimum, useMaximum, toWallet, amountIn, payInMethod, payOutMethod) { 
        obj['from'] = from || 'EUR';
        obj['to'] = to || 'USDC';
        obj['fromWallet'] = fromWallet || 3598236;
        obj['useMinimum'] = useMinimum || false;
        obj['useMaximum'] = useMaximum || false;
        obj['toWallet'] = toWallet || 3598514;
        obj['amountIn'] = amountIn || 10;
        obj['payInMethod'] = payInMethod || 'wallet';
        obj['payOutMethod'] = payOutMethod || 'wallet';
    }

    /**
     * Constructs a <code>QuoteRequestDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuoteRequestDto} obj Optional instance to populate.
     * @return {module:model/QuoteRequestDto} The populated <code>QuoteRequestDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuoteRequestDto();

            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('fromWallet')) {
                obj['fromWallet'] = ApiClient.convertToType(data['fromWallet'], 'Number');
            }
            if (data.hasOwnProperty('useMinimum')) {
                obj['useMinimum'] = ApiClient.convertToType(data['useMinimum'], 'Boolean');
            }
            if (data.hasOwnProperty('useMaximum')) {
                obj['useMaximum'] = ApiClient.convertToType(data['useMaximum'], 'Boolean');
            }
            if (data.hasOwnProperty('toWallet')) {
                obj['toWallet'] = ApiClient.convertToType(data['toWallet'], 'Number');
            }
            if (data.hasOwnProperty('amountIn')) {
                obj['amountIn'] = ApiClient.convertToType(data['amountIn'], 'Number');
            }
            if (data.hasOwnProperty('payInMethod')) {
                obj['payInMethod'] = ApiClient.convertToType(data['payInMethod'], 'String');
            }
            if (data.hasOwnProperty('payOutMethod')) {
                obj['payOutMethod'] = ApiClient.convertToType(data['payOutMethod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuoteRequestDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuoteRequestDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuoteRequestDto.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // ensure the json data is a string
        if (data['payInMethod'] && !(typeof data['payInMethod'] === 'string' || data['payInMethod'] instanceof String)) {
            throw new Error("Expected the field `payInMethod` to be a primitive type in the JSON string but got " + data['payInMethod']);
        }
        // ensure the json data is a string
        if (data['payOutMethod'] && !(typeof data['payOutMethod'] === 'string' || data['payOutMethod'] instanceof String)) {
            throw new Error("Expected the field `payOutMethod` to be a primitive type in the JSON string but got " + data['payOutMethod']);
        }

        return true;
    }


}

QuoteRequestDto.RequiredProperties = ["from", "to", "fromWallet", "useMinimum", "useMaximum", "toWallet", "amountIn", "payInMethod", "payOutMethod"];

/**
 * The currency to convert from.
 * @member {String} from
 * @default 'EUR'
 */
QuoteRequestDto.prototype['from'] = 'EUR';

/**
 * The currency to convert to.
 * @member {String} to
 * @default 'USDC'
 */
QuoteRequestDto.prototype['to'] = 'USDC';

/**
 * The ID of the wallet converted from.
 * @member {Number} fromWallet
 * @default 3598236
 */
QuoteRequestDto.prototype['fromWallet'] = 3598236;

/**
 * Is converting the minimum allowed amount.
 * @member {Boolean} useMinimum
 * @default false
 */
QuoteRequestDto.prototype['useMinimum'] = false;

/**
 * Is converting the max amount of the wallet.
 * @member {Boolean} useMaximum
 * @default false
 */
QuoteRequestDto.prototype['useMaximum'] = false;

/**
 * The ID of the wallet converted to.
 * @member {Number} toWallet
 * @default 3598514
 */
QuoteRequestDto.prototype['toWallet'] = 3598514;

/**
 * The amount being converted.
 * @member {Number} amountIn
 * @default 10
 */
QuoteRequestDto.prototype['amountIn'] = 10;

/**
 * The type of method in.
 * @member {String} payInMethod
 * @default 'wallet'
 */
QuoteRequestDto.prototype['payInMethod'] = 'wallet';

/**
 * The type of method out.
 * @member {String} payOutMethod
 * @default 'wallet'
 */
QuoteRequestDto.prototype['payOutMethod'] = 'wallet';






export default QuoteRequestDto;

