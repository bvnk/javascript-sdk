/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CryptoAddressDto from './CryptoAddressDto';
import DirectionDto from './DirectionDto';
import ExchangeRateDto from './ExchangeRateDto';
import GatewayTransactionDto from './GatewayTransactionDto';
import PayAmountsDto from './PayAmountsDto';
import PaymentStatusDto from './PaymentStatusDto';

/**
 * The SummaryPaymentDto model module.
 * @module model/SummaryPaymentDto
 * @version 1.0.1
 */
class SummaryPaymentDto {
    /**
     * Constructs a new <code>SummaryPaymentDto</code>.
     * Contains all the information about a summary payment object returned.
     * @alias module:model/SummaryPaymentDto
     */
    constructor() { 
        
        SummaryPaymentDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SummaryPaymentDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SummaryPaymentDto} obj Optional instance to populate.
     * @return {module:model/SummaryPaymentDto} The populated <code>SummaryPaymentDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SummaryPaymentDto();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('merchantDisplayName')) {
                obj['merchantDisplayName'] = ApiClient.convertToType(data['merchantDisplayName'], 'String');
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Number');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'Number');
            }
            if (data.hasOwnProperty('quoteExpiryDate')) {
                obj['quoteExpiryDate'] = ApiClient.convertToType(data['quoteExpiryDate'], 'Number');
            }
            if (data.hasOwnProperty('acceptanceExpiryDate')) {
                obj['acceptanceExpiryDate'] = ApiClient.convertToType(data['acceptanceExpiryDate'], 'Number');
            }
            if (data.hasOwnProperty('quoteStatus')) {
                obj['quoteStatus'] = ApiClient.convertToType(data['quoteStatus'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = DirectionDto.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('subType')) {
                obj['subType'] = ApiClient.convertToType(data['subType'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = PaymentStatusDto.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('displayCurrency')) {
                obj['displayCurrency'] = PayAmountsDto.constructFromObject(data['displayCurrency']);
            }
            if (data.hasOwnProperty('walletCurrency')) {
                obj['walletCurrency'] = PayAmountsDto.constructFromObject(data['walletCurrency']);
            }
            if (data.hasOwnProperty('paidCurrency')) {
                obj['paidCurrency'] = PayAmountsDto.constructFromObject(data['paidCurrency']);
            }
            if (data.hasOwnProperty('feeCurrency')) {
                obj['feeCurrency'] = PayAmountsDto.constructFromObject(data['feeCurrency']);
            }
            if (data.hasOwnProperty('displayRate')) {
                obj['displayRate'] = ExchangeRateDto.constructFromObject(data['displayRate']);
            }
            if (data.hasOwnProperty('exchangeRate')) {
                obj['exchangeRate'] = ExchangeRateDto.constructFromObject(data['exchangeRate']);
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = CryptoAddressDto.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('returnUrl')) {
                obj['returnUrl'] = ApiClient.convertToType(data['returnUrl'], 'String');
            }
            if (data.hasOwnProperty('redirectUrl')) {
                obj['redirectUrl'] = ApiClient.convertToType(data['redirectUrl'], 'String');
            }
            if (data.hasOwnProperty('transactions')) {
                obj['transactions'] = ApiClient.convertToType(data['transactions'], [GatewayTransactionDto]);
            }
            if (data.hasOwnProperty('refund')) {
                obj['refund'] = ApiClient.convertToType(data['refund'], Object);
            }
            if (data.hasOwnProperty('refunds')) {
                obj['refunds'] = ApiClient.convertToType(data['refunds'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SummaryPaymentDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SummaryPaymentDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['merchantDisplayName'] && !(typeof data['merchantDisplayName'] === 'string' || data['merchantDisplayName'] instanceof String)) {
            throw new Error("Expected the field `merchantDisplayName` to be a primitive type in the JSON string but got " + data['merchantDisplayName']);
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // ensure the json data is a string
        if (data['quoteStatus'] && !(typeof data['quoteStatus'] === 'string' || data['quoteStatus'] instanceof String)) {
            throw new Error("Expected the field `quoteStatus` to be a primitive type in the JSON string but got " + data['quoteStatus']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['subType'] && !(typeof data['subType'] === 'string' || data['subType'] instanceof String)) {
            throw new Error("Expected the field `subType` to be a primitive type in the JSON string but got " + data['subType']);
        }
        // validate the optional field `displayCurrency`
        if (data['displayCurrency']) { // data not null
          PayAmountsDto.validateJSON(data['displayCurrency']);
        }
        // validate the optional field `walletCurrency`
        if (data['walletCurrency']) { // data not null
          PayAmountsDto.validateJSON(data['walletCurrency']);
        }
        // validate the optional field `paidCurrency`
        if (data['paidCurrency']) { // data not null
          PayAmountsDto.validateJSON(data['paidCurrency']);
        }
        // validate the optional field `feeCurrency`
        if (data['feeCurrency']) { // data not null
          PayAmountsDto.validateJSON(data['feeCurrency']);
        }
        // validate the optional field `displayRate`
        if (data['displayRate']) { // data not null
          ExchangeRateDto.validateJSON(data['displayRate']);
        }
        // validate the optional field `exchangeRate`
        if (data['exchangeRate']) { // data not null
          ExchangeRateDto.validateJSON(data['exchangeRate']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          CryptoAddressDto.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['returnUrl'] && !(typeof data['returnUrl'] === 'string' || data['returnUrl'] instanceof String)) {
            throw new Error("Expected the field `returnUrl` to be a primitive type in the JSON string but got " + data['returnUrl']);
        }
        // ensure the json data is a string
        if (data['redirectUrl'] && !(typeof data['redirectUrl'] === 'string' || data['redirectUrl'] instanceof String)) {
            throw new Error("Expected the field `redirectUrl` to be a primitive type in the JSON string but got " + data['redirectUrl']);
        }
        if (data['transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transactions'])) {
                throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
            }
            // validate the optional field `transactions` (array)
            for (const item of data['transactions']) {
                GatewayTransactionDto.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['refunds'])) {
            throw new Error("Expected the field `refunds` to be an array in the JSON data but got " + data['refunds']);
        }

        return true;
    }


}



/**
 * The unique identifier for the merchant payment.
 * @member {String} uuid
 */
SummaryPaymentDto.prototype['uuid'] = undefined;

/**
 * The display name for the merchant payment.
 * @member {String} merchantDisplayName
 */
SummaryPaymentDto.prototype['merchantDisplayName'] = undefined;

/**
 * The Merchant ID. You can find it on the Merchant Details page in your account.
 * @member {String} merchantId
 */
SummaryPaymentDto.prototype['merchantId'] = undefined;

/**
 * The date and time, encoded into UNIX epoch timestamps.
 * @member {Number} dateCreated
 */
SummaryPaymentDto.prototype['dateCreated'] = undefined;

/**
 * The date and time, encoded into UNIX epoch timestamps
 * @member {Number} expiryDate
 */
SummaryPaymentDto.prototype['expiryDate'] = undefined;

/**
 * The date and time, encoded into UNIX epoch timestamps
 * @member {Number} quoteExpiryDate
 */
SummaryPaymentDto.prototype['quoteExpiryDate'] = undefined;

/**
 * The date and time, encoded into UNIX epoch timestamps
 * @member {Number} acceptanceExpiryDate
 */
SummaryPaymentDto.prototype['acceptanceExpiryDate'] = undefined;

/**
 * @member {String} quoteStatus
 */
SummaryPaymentDto.prototype['quoteStatus'] = undefined;

/**
 * The custom payment reference ID to tie the payment to your customer.
 * @member {String} reference
 */
SummaryPaymentDto.prototype['reference'] = undefined;

/**
 * @member {module:model/DirectionDto} type
 */
SummaryPaymentDto.prototype['type'] = undefined;

/**
 * The payment sub type
 * @member {module:model/SummaryPaymentDto.SubTypeEnum} subType
 * @default 'merchantPayIn'
 */
SummaryPaymentDto.prototype['subType'] = 'merchantPayIn';

/**
 * @member {module:model/PaymentStatusDto} status
 */
SummaryPaymentDto.prototype['status'] = undefined;

/**
 * @member {module:model/PayAmountsDto} displayCurrency
 */
SummaryPaymentDto.prototype['displayCurrency'] = undefined;

/**
 * @member {module:model/PayAmountsDto} walletCurrency
 */
SummaryPaymentDto.prototype['walletCurrency'] = undefined;

/**
 * @member {module:model/PayAmountsDto} paidCurrency
 */
SummaryPaymentDto.prototype['paidCurrency'] = undefined;

/**
 * @member {module:model/PayAmountsDto} feeCurrency
 */
SummaryPaymentDto.prototype['feeCurrency'] = undefined;

/**
 * @member {module:model/ExchangeRateDto} displayRate
 */
SummaryPaymentDto.prototype['displayRate'] = undefined;

/**
 * @member {module:model/ExchangeRateDto} exchangeRate
 */
SummaryPaymentDto.prototype['exchangeRate'] = undefined;

/**
 * @member {module:model/CryptoAddressDto} address
 */
SummaryPaymentDto.prototype['address'] = undefined;

/**
 * The URL that the customer will be redirected to if they click 'Back to Merchant' button on the payment web page.
 * @member {String} returnUrl
 */
SummaryPaymentDto.prototype['returnUrl'] = undefined;

/**
 * The URL to the payment page that you redirect your customers to.
 * @member {String} redirectUrl
 */
SummaryPaymentDto.prototype['redirectUrl'] = undefined;

/**
 * @member {Array.<module:model/GatewayTransactionDto>} transactions
 */
SummaryPaymentDto.prototype['transactions'] = undefined;

/**
 * The payment this object is a refund of. This should reference the pay in that this refund was created for.
 * @member {Object} refund
 */
SummaryPaymentDto.prototype['refund'] = undefined;

/**
 * Refunds that have been requested for this payment. This should reference the refund payout for this pay in.
 * @member {Array.<Object>} refunds
 */
SummaryPaymentDto.prototype['refunds'] = undefined;





/**
 * Allowed values for the <code>subType</code> property.
 * @enum {String}
 * @readonly
 */
SummaryPaymentDto['SubTypeEnum'] = {

    /**
     * value: "merchantPayIn"
     * @const
     */
    "merchantPayIn": "merchantPayIn",

    /**
     * value: "merchantPayOut"
     * @const
     */
    "merchantPayOut": "merchantPayOut",

    /**
     * value: "merchantRefund"
     * @const
     */
    "merchantRefund": "merchantRefund"
};



export default SummaryPaymentDto;

