/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExchangeRateDto from './ExchangeRateDto';
import NetworkFee from './NetworkFee';

/**
 * The MerchantChannelPayment model module.
 * @module model/MerchantChannelPayment
 * @version 1.0.1
 */
class MerchantChannelPayment {
    /**
     * Constructs a new <code>MerchantChannelPayment</code>.
     * @alias module:model/MerchantChannelPayment
     */
    constructor() { 
        
        MerchantChannelPayment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MerchantChannelPayment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MerchantChannelPayment} obj Optional instance to populate.
     * @return {module:model/MerchantChannelPayment} The populated <code>MerchantChannelPayment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MerchantChannelPayment();

            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('merchantDisplayName')) {
                obj['merchantDisplayName'] = ApiClient.convertToType(data['merchantDisplayName'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Number');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('paidCurrency')) {
                obj['paidCurrency'] = ApiClient.convertToType(data['paidCurrency'], 'String');
            }
            if (data.hasOwnProperty('displayCurrency')) {
                obj['displayCurrency'] = ApiClient.convertToType(data['displayCurrency'], 'String');
            }
            if (data.hasOwnProperty('walletCurrency')) {
                obj['walletCurrency'] = ApiClient.convertToType(data['walletCurrency'], 'String');
            }
            if (data.hasOwnProperty('feeCurrency')) {
                obj['feeCurrency'] = ApiClient.convertToType(data['feeCurrency'], 'String');
            }
            if (data.hasOwnProperty('paidAmount')) {
                obj['paidAmount'] = ApiClient.convertToType(data['paidAmount'], 'Number');
            }
            if (data.hasOwnProperty('displayAmount')) {
                obj['displayAmount'] = ApiClient.convertToType(data['displayAmount'], 'Number');
            }
            if (data.hasOwnProperty('walletAmount')) {
                obj['walletAmount'] = ApiClient.convertToType(data['walletAmount'], 'Number');
            }
            if (data.hasOwnProperty('feeAmount')) {
                obj['feeAmount'] = ApiClient.convertToType(data['feeAmount'], 'Number');
            }
            if (data.hasOwnProperty('exchangeRate')) {
                obj['exchangeRate'] = ExchangeRateDto.constructFromObject(data['exchangeRate']);
            }
            if (data.hasOwnProperty('displayRate')) {
                obj['displayRate'] = ExchangeRateDto.constructFromObject(data['displayRate']);
            }
            if (data.hasOwnProperty('risk')) {
                obj['risk'] = ExchangeRateDto.constructFromObject(data['risk']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
            if (data.hasOwnProperty('networkFee')) {
                obj['networkFee'] = NetworkFee.constructFromObject(data['networkFee']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MerchantChannelPayment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MerchantChannelPayment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // ensure the json data is a string
        if (data['merchantDisplayName'] && !(typeof data['merchantDisplayName'] === 'string' || data['merchantDisplayName'] instanceof String)) {
            throw new Error("Expected the field `merchantDisplayName` to be a primitive type in the JSON string but got " + data['merchantDisplayName']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is a string
        if (data['paidCurrency'] && !(typeof data['paidCurrency'] === 'string' || data['paidCurrency'] instanceof String)) {
            throw new Error("Expected the field `paidCurrency` to be a primitive type in the JSON string but got " + data['paidCurrency']);
        }
        // ensure the json data is a string
        if (data['displayCurrency'] && !(typeof data['displayCurrency'] === 'string' || data['displayCurrency'] instanceof String)) {
            throw new Error("Expected the field `displayCurrency` to be a primitive type in the JSON string but got " + data['displayCurrency']);
        }
        // ensure the json data is a string
        if (data['walletCurrency'] && !(typeof data['walletCurrency'] === 'string' || data['walletCurrency'] instanceof String)) {
            throw new Error("Expected the field `walletCurrency` to be a primitive type in the JSON string but got " + data['walletCurrency']);
        }
        // ensure the json data is a string
        if (data['feeCurrency'] && !(typeof data['feeCurrency'] === 'string' || data['feeCurrency'] instanceof String)) {
            throw new Error("Expected the field `feeCurrency` to be a primitive type in the JSON string but got " + data['feeCurrency']);
        }
        // validate the optional field `exchangeRate`
        if (data['exchangeRate']) { // data not null
          ExchangeRateDto.validateJSON(data['exchangeRate']);
        }
        // validate the optional field `displayRate`
        if (data['displayRate']) { // data not null
          ExchangeRateDto.validateJSON(data['displayRate']);
        }
        // validate the optional field `risk`
        if (data['risk']) { // data not null
          ExchangeRateDto.validateJSON(data['risk']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }
        // validate the optional field `networkFee`
        if (data['networkFee']) { // data not null
          NetworkFee.validateJSON(data['networkFee']);
        }

        return true;
    }


}



/**
 * @member {String} channelId
 */
MerchantChannelPayment.prototype['channelId'] = undefined;

/**
 * @member {String} merchantId
 */
MerchantChannelPayment.prototype['merchantId'] = undefined;

/**
 * @member {String} merchantDisplayName
 */
MerchantChannelPayment.prototype['merchantDisplayName'] = undefined;

/**
 * @member {String} reference
 */
MerchantChannelPayment.prototype['reference'] = undefined;

/**
 * @member {Number} dateCreated
 * @default 0
 */
MerchantChannelPayment.prototype['dateCreated'] = 0;

/**
 * @member {Number} lastUpdated
 * @default 0
 */
MerchantChannelPayment.prototype['lastUpdated'] = 0;

/**
 * @member {module:model/MerchantChannelPayment.StatusEnum} status
 */
MerchantChannelPayment.prototype['status'] = undefined;

/**
 * @member {String} uuid
 */
MerchantChannelPayment.prototype['uuid'] = undefined;

/**
 * @member {String} hash
 */
MerchantChannelPayment.prototype['hash'] = undefined;

/**
 * @member {String} address
 */
MerchantChannelPayment.prototype['address'] = undefined;

/**
 * @member {String} tag
 */
MerchantChannelPayment.prototype['tag'] = undefined;

/**
 * @member {String} paidCurrency
 */
MerchantChannelPayment.prototype['paidCurrency'] = undefined;

/**
 * @member {String} displayCurrency
 */
MerchantChannelPayment.prototype['displayCurrency'] = undefined;

/**
 * @member {String} walletCurrency
 */
MerchantChannelPayment.prototype['walletCurrency'] = undefined;

/**
 * @member {String} feeCurrency
 */
MerchantChannelPayment.prototype['feeCurrency'] = undefined;

/**
 * @member {Number} paidAmount
 * @default 0
 */
MerchantChannelPayment.prototype['paidAmount'] = 0;

/**
 * @member {Number} displayAmount
 * @default 0
 */
MerchantChannelPayment.prototype['displayAmount'] = 0;

/**
 * @member {Number} walletAmount
 * @default 0
 */
MerchantChannelPayment.prototype['walletAmount'] = 0;

/**
 * @member {Number} feeAmount
 * @default 0
 */
MerchantChannelPayment.prototype['feeAmount'] = 0;

/**
 * @member {module:model/ExchangeRateDto} exchangeRate
 */
MerchantChannelPayment.prototype['exchangeRate'] = undefined;

/**
 * @member {module:model/ExchangeRateDto} displayRate
 */
MerchantChannelPayment.prototype['displayRate'] = undefined;

/**
 * @member {module:model/ExchangeRateDto} risk
 */
MerchantChannelPayment.prototype['risk'] = undefined;

/**
 * @member {Array.<String>} sources
 */
MerchantChannelPayment.prototype['sources'] = undefined;

/**
 * @member {module:model/NetworkFee} networkFee
 */
MerchantChannelPayment.prototype['networkFee'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
MerchantChannelPayment['StatusEnum'] = {

    /**
     * value: "DETECTED"
     * @const
     */
    "DETECTED": "DETECTED",

    /**
     * value: "COMPLETE"
     * @const
     */
    "COMPLETE": "COMPLETE",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN"
};



export default MerchantChannelPayment;

