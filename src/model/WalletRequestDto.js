/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WalletRequestDto model module.
 * @module model/WalletRequestDto
 * @version 1.0.1
 */
class WalletRequestDto {
    /**
     * Constructs a new <code>WalletRequestDto</code>.
     * @alias module:model/WalletRequestDto
     * @param currency {String} The currency of the wallet.
     * @param description {String} The name of the wallet.
     */
    constructor(currency, description) { 
        
        WalletRequestDto.initialize(this, currency, description);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, description) { 
        obj['currency'] = currency || 'ETH';
        obj['description'] = description || 'My 2nd EUR Wallet';
    }

    /**
     * Constructs a <code>WalletRequestDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WalletRequestDto} obj Optional instance to populate.
     * @return {module:model/WalletRequestDto} The populated <code>WalletRequestDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WalletRequestDto();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WalletRequestDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WalletRequestDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WalletRequestDto.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

WalletRequestDto.RequiredProperties = ["currency", "description"];

/**
 * The currency of the wallet.
 * @member {String} currency
 * @default 'ETH'
 */
WalletRequestDto.prototype['currency'] = 'ETH';

/**
 * The name of the wallet.
 * @member {String} description
 * @default 'My 2nd EUR Wallet'
 */
WalletRequestDto.prototype['description'] = 'My 2nd EUR Wallet';






export default WalletRequestDto;

