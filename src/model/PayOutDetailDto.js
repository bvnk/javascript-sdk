/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PayOutDetailDto model module.
 * @module model/PayOutDetailDto
 * @version 1.0.1
 */
class PayOutDetailDto {
    /**
     * Constructs a new <code>PayOutDetailDto</code>.
     * The payment out details, only needed when \&quot;type\&quot; is OUT
     * @alias module:model/PayOutDetailDto
     * @param code {String} The gateway to be used, 'crypto' or 'wallet'.
     * @param currency {String} The currency acronym payout needs to be made in.
     * @param address {String} The address to withdrawal funds to.
     */
    constructor(code, currency, address) { 
        
        PayOutDetailDto.initialize(this, code, currency, address);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, currency, address) { 
        obj['code'] = code;
        obj['currency'] = currency;
        obj['address'] = address;
    }

    /**
     * Constructs a <code>PayOutDetailDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayOutDetailDto} obj Optional instance to populate.
     * @return {module:model/PayOutDetailDto} The populated <code>PayOutDetailDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayOutDetailDto();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayOutDetailDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayOutDetailDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PayOutDetailDto.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }

        return true;
    }


}

PayOutDetailDto.RequiredProperties = ["code", "currency", "address"];

/**
 * The gateway to be used, 'crypto' or 'wallet'.
 * @member {String} code
 */
PayOutDetailDto.prototype['code'] = undefined;

/**
 * The currency acronym payout needs to be made in.
 * @member {String} currency
 */
PayOutDetailDto.prototype['currency'] = undefined;

/**
 * The address to withdrawal funds to.
 * @member {String} address
 */
PayOutDetailDto.prototype['address'] = undefined;

/**
 * This is a payment destination tag. This fields isn't null when the paidCurrency currency value is XRP.
 * @member {String} tag
 */
PayOutDetailDto.prototype['tag'] = undefined;

/**
 * The protocol behind a currency, 'ERC20' or 'TRC20'.
 * @member {String} protocol
 */
PayOutDetailDto.prototype['protocol'] = undefined;






export default PayOutDetailDto;

