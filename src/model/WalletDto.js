/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyDto from './CurrencyDto';

/**
 * The WalletDto model module.
 * @module model/WalletDto
 * @version 1.0.1
 */
class WalletDto {
    /**
     * Constructs a new <code>WalletDto</code>.
     * @alias module:model/WalletDto
     */
    constructor() { 
        
        WalletDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WalletDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WalletDto} obj Optional instance to populate.
     * @return {module:model/WalletDto} The populated <code>WalletDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WalletDto();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('alternatives')) {
                obj['alternatives'] = ApiClient.convertToType(data['alternatives'], [Object]);
            }
            if (data.hasOwnProperty('approxAvailable')) {
                obj['approxAvailable'] = ApiClient.convertToType(data['approxAvailable'], 'String');
            }
            if (data.hasOwnProperty('approxBalance')) {
                obj['approxBalance'] = ApiClient.convertToType(data['approxBalance'], 'String');
            }
            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Number');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('convertedAvailable')) {
                obj['convertedAvailable'] = ApiClient.convertToType(data['convertedAvailable'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = CurrencyDto.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('custodianWallet')) {
                obj['custodianWallet'] = ApiClient.convertToType(data['custodianWallet'], 'Boolean');
            }
            if (data.hasOwnProperty('depositFee')) {
                obj['depositFee'] = ApiClient.convertToType(data['depositFee'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isEmoney')) {
                obj['isEmoney'] = ApiClient.convertToType(data['isEmoney'], 'Boolean');
            }
            if (data.hasOwnProperty('lookup')) {
                obj['lookup'] = ApiClient.convertToType(data['lookup'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('supportsDeposits')) {
                obj['supportsDeposits'] = ApiClient.convertToType(data['supportsDeposits'], 'Boolean');
            }
            if (data.hasOwnProperty('supportsThirdParty')) {
                obj['supportsThirdParty'] = ApiClient.convertToType(data['supportsThirdParty'], 'Boolean');
            }
            if (data.hasOwnProperty('supportsWithdrawals')) {
                obj['supportsWithdrawals'] = ApiClient.convertToType(data['supportsWithdrawals'], 'Boolean');
            }
            if (data.hasOwnProperty('withdrawalFee')) {
                obj['withdrawalFee'] = ApiClient.convertToType(data['withdrawalFee'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WalletDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WalletDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['alternatives'])) {
            throw new Error("Expected the field `alternatives` to be an array in the JSON data but got " + data['alternatives']);
        }
        // ensure the json data is a string
        if (data['approxAvailable'] && !(typeof data['approxAvailable'] === 'string' || data['approxAvailable'] instanceof String)) {
            throw new Error("Expected the field `approxAvailable` to be a primitive type in the JSON string but got " + data['approxAvailable']);
        }
        // ensure the json data is a string
        if (data['approxBalance'] && !(typeof data['approxBalance'] === 'string' || data['approxBalance'] instanceof String)) {
            throw new Error("Expected the field `approxBalance` to be a primitive type in the JSON string but got " + data['approxBalance']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          CurrencyDto.validateJSON(data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['lookup'] && !(typeof data['lookup'] === 'string' || data['lookup'] instanceof String)) {
            throw new Error("Expected the field `lookup` to be a primitive type in the JSON string but got " + data['lookup']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }

        return true;
    }


}



/**
 * The crypto wallet address
 * @member {String} address
 */
WalletDto.prototype['address'] = undefined;

/**
 * The array of alternative protocol addresses.
 * @member {Array.<Object>} alternatives
 */
WalletDto.prototype['alternatives'] = undefined;

/**
 * The approximate amount availible in the wallet.
 * @member {String} approxAvailable
 */
WalletDto.prototype['approxAvailable'] = undefined;

/**
 * The balance amount availible of the wallet.
 * @member {String} approxBalance
 */
WalletDto.prototype['approxBalance'] = undefined;

/**
 * @member {Number} available
 */
WalletDto.prototype['available'] = undefined;

/**
 * The balance of the wallet.
 * @member {Number} balance
 */
WalletDto.prototype['balance'] = undefined;

/**
 * The availible converted amount
 * @member {Number} convertedAvailable
 */
WalletDto.prototype['convertedAvailable'] = undefined;

/**
 * @member {module:model/CurrencyDto} currency
 */
WalletDto.prototype['currency'] = undefined;

/**
 * Is a custodian wallet.
 * @member {Boolean} custodianWallet
 */
WalletDto.prototype['custodianWallet'] = undefined;

/**
 * The fee to deposit funds in wallet.
 * @member {Number} depositFee
 */
WalletDto.prototype['depositFee'] = undefined;

/**
 * The description of the wallet.
 * @member {String} description
 */
WalletDto.prototype['description'] = undefined;

/**
 * The wallet ID.
 * @member {Number} id
 */
WalletDto.prototype['id'] = undefined;

/**
 * Is E Money Wallet
 * @member {Boolean} isEmoney
 * @default false
 */
WalletDto.prototype['isEmoney'] = false;

/**
 * Is a lookup.
 * @member {String} lookup
 */
WalletDto.prototype['lookup'] = undefined;

/**
 * The protocol of the wallet.
 * @member {String} protocol
 */
WalletDto.prototype['protocol'] = undefined;

/**
 * Is able to support deposits.
 * @member {Boolean} supportsDeposits
 * @default true
 */
WalletDto.prototype['supportsDeposits'] = true;

/**
 * Is a third party wallet.
 * @member {Boolean} supportsThirdParty
 * @default false
 */
WalletDto.prototype['supportsThirdParty'] = false;

/**
 * Is able to support withdrawals.
 * @member {Boolean} supportsWithdrawals
 * @default true
 */
WalletDto.prototype['supportsWithdrawals'] = true;

/**
 * The fee to withdraw funds from wallet.
 * @member {Number} withdrawalFee
 */
WalletDto.prototype['withdrawalFee'] = undefined;






export default WalletDto;

