/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionReportRequestDataDto from './TransactionReportRequestDataDto';

/**
 * The TransactionReportDto model module.
 * @module model/TransactionReportDto
 * @version 1.0.1
 */
class TransactionReportDto {
    /**
     * Constructs a new <code>TransactionReportDto</code>.
     * @alias module:model/TransactionReportDto
     */
    constructor() { 
        
        TransactionReportDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionReportDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionReportDto} obj Optional instance to populate.
     * @return {module:model/TransactionReportDto} The populated <code>TransactionReportDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionReportDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Number');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('requestData')) {
                obj['requestData'] = TransactionReportRequestDataDto.constructFromObject(data['requestData']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionReportDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionReportDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `requestData`
        if (data['requestData']) { // data not null
          TransactionReportRequestDataDto.validateJSON(data['requestData']);
        }

        return true;
    }


}



/**
 * The ID of the transaction request.
 * @member {Number} id
 */
TransactionReportDto.prototype['id'] = undefined;

/**
 * The UUID of the transaction report.
 * @member {String} uuid
 */
TransactionReportDto.prototype['uuid'] = undefined;

/**
 * The date and time, encoded into UNIX epoch timestamps.
 * @member {Number} dateCreated
 */
TransactionReportDto.prototype['dateCreated'] = undefined;

/**
 * The date and time, encoded into UNIX epoch timestamps.
 * @member {Number} lastUpdated
 */
TransactionReportDto.prototype['lastUpdated'] = undefined;

/**
 * The date and time, encoded into UNIX epoch timestamps.
 * @member {Number} expiryDate
 */
TransactionReportDto.prototype['expiryDate'] = undefined;

/**
 * The status of the transaction report.
 * @member {String} status
 */
TransactionReportDto.prototype['status'] = undefined;

/**
 * The type of the report.
 * @member {String} type
 */
TransactionReportDto.prototype['type'] = undefined;

/**
 * @member {module:model/TransactionReportRequestDataDto} requestData
 */
TransactionReportDto.prototype['requestData'] = undefined;






export default TransactionReportDto;

