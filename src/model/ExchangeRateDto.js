/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExchangeRateDto model module.
 * @module model/ExchangeRateDto
 * @version 1.0.1
 */
class ExchangeRateDto {
    /**
     * Constructs a new <code>ExchangeRateDto</code>.
     * Contains exchange rate information to convert from base currency to counter currency.
     * @alias module:model/ExchangeRateDto
     */
    constructor() { 
        
        ExchangeRateDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExchangeRateDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExchangeRateDto} obj Optional instance to populate.
     * @return {module:model/ExchangeRateDto} The populated <code>ExchangeRateDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExchangeRateDto();

            if (data.hasOwnProperty('base')) {
                obj['base'] = ApiClient.convertToType(data['base'], 'String');
            }
            if (data.hasOwnProperty('counter')) {
                obj['counter'] = ApiClient.convertToType(data['counter'], 'String');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExchangeRateDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExchangeRateDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['base'] && !(typeof data['base'] === 'string' || data['base'] instanceof String)) {
            throw new Error("Expected the field `base` to be a primitive type in the JSON string but got " + data['base']);
        }
        // ensure the json data is a string
        if (data['counter'] && !(typeof data['counter'] === 'string' || data['counter'] instanceof String)) {
            throw new Error("Expected the field `counter` to be a primitive type in the JSON string but got " + data['counter']);
        }

        return true;
    }


}



/**
 * The base currency acronym.
 * @member {String} base
 */
ExchangeRateDto.prototype['base'] = undefined;

/**
 * The counter currency acronym.
 * @member {String} counter
 */
ExchangeRateDto.prototype['counter'] = undefined;

/**
 * The exchange rate
 * @member {Number} rate
 */
ExchangeRateDto.prototype['rate'] = undefined;






export default ExchangeRateDto;

