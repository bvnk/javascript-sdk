/**
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExchangeRateDto from './ExchangeRateDto';

/**
 * The GatewayTransactionDto model module.
 * @module model/GatewayTransactionDto
 * @version 1.0.1
 */
class GatewayTransactionDto {
    /**
     * Constructs a new <code>GatewayTransactionDto</code>.
     * The specific details about transactions,  onchain or offchain, linked to the payment.
     * @alias module:model/GatewayTransactionDto
     */
    constructor() { 
        
        GatewayTransactionDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GatewayTransactionDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayTransactionDto} obj Optional instance to populate.
     * @return {module:model/GatewayTransactionDto} The populated <code>GatewayTransactionDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GatewayTransactionDto();

            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Number');
            }
            if (data.hasOwnProperty('dateConfirmed')) {
                obj['dateConfirmed'] = ApiClient.convertToType(data['dateConfirmed'], 'Number');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('risk')) {
                obj['risk'] = ApiClient.convertToType(data['risk'], Object);
            }
            if (data.hasOwnProperty('networkFeeCurrency')) {
                obj['networkFeeCurrency'] = ApiClient.convertToType(data['networkFeeCurrency'], 'String');
            }
            if (data.hasOwnProperty('networkFeeAmount')) {
                obj['networkFeeAmount'] = ApiClient.convertToType(data['networkFeeAmount'], 'Number');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
            if (data.hasOwnProperty('displayRate')) {
                obj['displayRate'] = ExchangeRateDto.constructFromObject(data['displayRate']);
            }
            if (data.hasOwnProperty('exchangeRate')) {
                obj['exchangeRate'] = ExchangeRateDto.constructFromObject(data['exchangeRate']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GatewayTransactionDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GatewayTransactionDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is a string
        if (data['networkFeeCurrency'] && !(typeof data['networkFeeCurrency'] === 'string' || data['networkFeeCurrency'] instanceof String)) {
            throw new Error("Expected the field `networkFeeCurrency` to be a primitive type in the JSON string but got " + data['networkFeeCurrency']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }
        // validate the optional field `displayRate`
        if (data['displayRate']) { // data not null
          ExchangeRateDto.validateJSON(data['displayRate']);
        }
        // validate the optional field `exchangeRate`
        if (data['exchangeRate']) { // data not null
          ExchangeRateDto.validateJSON(data['exchangeRate']);
        }

        return true;
    }


}



/**
 * The date and time, encoded into UNIX epoch timestamps.
 * @member {Number} dateCreated
 */
GatewayTransactionDto.prototype['dateCreated'] = undefined;

/**
 * The date and time, encoded into UNIX epoch timestamps.
 * @member {Number} dateConfirmed
 */
GatewayTransactionDto.prototype['dateConfirmed'] = undefined;

/**
 * Transaction hash.
 * @member {String} hash
 */
GatewayTransactionDto.prototype['hash'] = undefined;

/**
 * The payment amount.
 * @member {Number} amount
 */
GatewayTransactionDto.prototype['amount'] = undefined;

/**
 * @member {Object} risk
 */
GatewayTransactionDto.prototype['risk'] = undefined;

/**
 * The currency acronym.
 * @member {String} networkFeeCurrency
 */
GatewayTransactionDto.prototype['networkFeeCurrency'] = undefined;

/**
 * The network fee amount.
 * @member {Number} networkFeeAmount
 */
GatewayTransactionDto.prototype['networkFeeAmount'] = undefined;

/**
 * The list of source addresses, only applicable if payment in.
 * @member {Array.<String>} sources
 */
GatewayTransactionDto.prototype['sources'] = undefined;

/**
 * @member {module:model/ExchangeRateDto} displayRate
 */
GatewayTransactionDto.prototype['displayRate'] = undefined;

/**
 * @member {module:model/ExchangeRateDto} exchangeRate
 */
GatewayTransactionDto.prototype['exchangeRate'] = undefined;






export default GatewayTransactionDto;

